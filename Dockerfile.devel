FROM ubuntu:16.04

RUN apt-get update && apt-get install -y \
        automake \
        build-essential \
        curl \
        git \
        libfreetype6-dev \
        libpng12-dev \
        libtool \
        libzmq3-dev \
        mlocate \
        pkg-config \
        python-dev \
        python-numpy \
        python-pip \
        software-properties-common \
        swig \
        zip \
        g++ \
        unzip \
        zlib1g-dev \
        libcurl3-dev \
        openjdk-8-jdk\
        openjdk-8-jre-headless \
        wget && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Set up grpc
RUN pip install --upgrade pip
RUN pip install mock grpcio


# SET UP BAZEL.
# Running bazel inside a `docker build` command causes trouble, cf:
#   https://github.com/bazelbuild/bazel/issues/134
# The easiest solution is to set up a bazelrc file forcing --batch.
RUN echo "startup --batch" >>/etc/bazel.bazelrc

# Similarly, we need to workaround sandboxing issues:
#   https://github.com/bazelbuild/bazel/issues/418
RUN echo "build --spawn_strategy=standalone --genrule_strategy=standalone" \
    >>/etc/bazel.bazelrc

# Install a recent bazel release.
ENV BAZEL_VERSION 0.14.1
WORKDIR /
RUN mkdir /bazel && \
    cd /bazel && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \
    chmod +x bazel-*.sh && \
    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    cd / && \
    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh

# Download, build, and install TensorFlow Serving
ARG TF_SERVING_VERSION_GIT_BRANCH=master
WORKDIR /tensorflow-serving
RUN git clone --depth=1 --branch=${TF_SERVING_VERSION_GIT_BRANCH} \
        https://github.com/tensorflow/serving .

ARG TF_SERVING_BUILD_OPTIONS="--copt=-mavx --cxxopt=-D_GLIBCXX_USE_CXX11_ABI=0"
RUN bazel build --local_resources 5000,1.0,1.0 -c opt --color=yes --curses=yes ${TF_SERVING_BUILD_OPTIONS} \
    --output_filter=DONT_MATCH_ANYTHING \
    tensorflow_serving/model_servers:tensorflow_model_server && \
    cp bazel-bin/tensorflow_serving/model_servers/tensorflow_model_server /usr/local/bin/ && \
    bazel clean --expunge --color=yes && \
    rm -rf /root/.cache
# Clean up Bazel cache when done.

CMD ["/bin/bash"]
